
import pathlib, json
from ..runners.runner import SuiteResult

HTML_TMPL = '''<!doctype html>
<html><head><meta charset="utf-8"><title>PGXL Test Report</title>
<style>
body{font-family:Arial,Helvetica,sans-serif;margin:24px;color:#111}
h1{margin-bottom:0} .muted{color:#666} .section{margin:24px 0}
.badge{display:inline-block;padding:2px 8px;border-radius:10px;font-size:12px;color:#fff}
.badge.pass{background:#2e7d32}.badge.fail{background:#c62828}
table{border-collapse:collapse;width:100%} td,th{border:1px solid #ddd;padding:6px}
figure{margin:12px 0}
</style></head><body>
<h1>PGXL Customer Report</h1>
<div class="muted">{{meta}}</div>
<div class="section">
  <h2>Summary</h2>
  <table>
    <tr><th>Suite</th><th>Case</th><th>Status</th><th>Notes</th></tr>
    {{rows}}
  </table>
</div>
{{sections}}
</body></html>'''

def _row(suite, case_id, passed, logs):
    badge = '<span class="badge pass">PASS</span>' if passed else '<span class="badge fail">FAIL</span>'
    return f"<tr><td>{suite}</td><td>{case_id}</td><td>{badge}</td><td>{'; '.join(logs)}</td></tr>"

def _section(title, imgs):
    figs = "".join([f"<figure><img src='{p}' style='max-width:100%'><figcaption>{p}</figcaption></figure>" for p in imgs])
    return f"<div class='section'><h2>{title}</h2>{figs}</div>"

class HTMLPDFReporter:
    def __init__(self, html_path: str, pdf_path: str|None=None):
        self.html_path = html_path
        self.pdf_path = pdf_path

    def emit(self, result: SuiteResult) -> None:
        meta = "Generated by pgxl-testkit"
        rows = []
        sections = []
        # naive artifact scrape: include any PNGs from artifacts/<suite>/*/
        import glob
        pngs = sorted(glob.glob(f"artifacts/{result.suite}/**/*.png", recursive=True))
        for c in result.cases:
            rows.append(_row(result.suite, c.id, c.failed == 0 and c.skipped == 0, c.logs))
        # group by suite title:
        sections.append(_section(f"{result.suite} artifacts", pngs))
        html = HTML_TMPL.replace("{{meta}}", meta).replace("{{rows}}", "".join(rows)).replace("{{sections}}", "".join(sections))
        pathlib.Path(self.html_path).write_text(html)
        # Optional: PDF via reportlab if installed
        if self.pdf_path:
            try:
                from reportlab.lib.pagesizes import letter
                from reportlab.pdfgen import canvas
                c = canvas.Canvas(self.pdf_path, pagesize=letter)
                c.setTitle("PGXL Test Report")
                text = c.beginText(40, 760)
                text.textLine("PGXL Test Report")
                text.textLine(f"Suite: {result.suite}")
                c.drawText(text)
                y = 720
                for row in rows:
                    if y < 60:
                        c.showPage(); y = 760
                    c.drawString(40, y, row.replace('<','').replace('>',''))
                    y -= 14
                c.showPage()
                c.save()
            except Exception:
                pass
